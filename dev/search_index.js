var documenterSearchIndex = {"docs":
[{"location":"dual_complexes/#Dual-complexes","page":"Dual complexes","title":"Dual complexes","text":"","category":"section"},{"location":"dual_complexes/#API-docs","page":"Dual complexes","title":"API docs","text":"","category":"section"},{"location":"dual_complexes/","page":"Dual complexes","title":"Dual complexes","text":"Modules = [ DualSimplicialSets ]\nPrivate = false","category":"page"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets","text":"Dual complexes for simplicial sets in one, two, and three dimensions.\n\n\n\n\n\n","category":"module"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.AbstractDeltaDualComplex1D","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.AbstractDeltaDualComplex1D","text":"Abstract type for dual complex of a 1D delta set.\n\n\n\n\n\n","category":"type"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.AbstractDeltaDualComplex2D","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.AbstractDeltaDualComplex2D","text":"Abstract type for dual complex of a 2D delta set.\n\n\n\n\n\n","category":"type"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.Barycenter","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.Barycenter","text":"Barycenter, aka centroid, of a simplex.\n\n\n\n\n\n","category":"type"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.Circumcenter","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.Circumcenter","text":"Circumcenter, or center of circumscribed circle, of a simplex.\n\nThe circumcenter is calculated by inverting the Cayley-Menger matrix, as explained by Westdendorp. This method of calculation is also used in the package AlphaShapes.jl.\n\n\n\n\n\n","category":"type"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.DeltaDualComplex1D","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.DeltaDualComplex1D","text":"Dual complex of a one-dimensional delta set.\n\nThe data structure includes both the primal complex and the dual complex, as well as the mapping between them.\n\n\n\n\n\n","category":"type"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.DeltaDualComplex2D","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.DeltaDualComplex2D","text":"Dual complex of a two-dimensional delta set.\n\n\n\n\n\n","category":"type"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.DualChain","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.DualChain","text":"Wrapper for chain of dual cells of dimension n.\n\nIn an N-dimensional complex, the elementary dual simplices of each n-simplex together comprise the dual (N-n)-cell of the simplex. Using this correspondence, a basis for primal n-chains defines the basis for dual (N-n)-chains.\n\nnote: Note\nIn (Hirani 2003, Definition 3.4.1), the duality operator assigns a certain sign to each elementary dual simplex. For us, all of these signs should be regarded as positive because we have already incorporated them into the orientation of the dual simplices.\n\n\n\n\n\n","category":"type"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.DualE","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.DualE","text":"Edge in simplicial set: alias for Simplex{1}.\n\n\n\n\n\n","category":"type"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.DualForm","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.DualForm","text":"Wrapper for form, aka cochain, on dual cells of dimension n.\n\n\n\n\n\n","category":"type"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.DualSimplex","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.DualSimplex","text":"Wrapper for dual simplex or simplices of dimension D.\n\nSee also: DualV, DualE, DualTri.\n\n\n\n\n\n","category":"type"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.DualTri","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.DualTri","text":"Triangle in simplicial set: alias for Simplex{2}.\n\n\n\n\n\n","category":"type"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.DualV","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.DualV","text":"Vertex in simplicial set: alias for Simplex{0}.\n\n\n\n\n\n","category":"type"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.EmbeddedDeltaDualComplex1D","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.EmbeddedDeltaDualComplex1D","text":"Embedded dual complex of an embedded 1D delta set.\n\nAlthough they are redundant information, the lengths of the primal and dual edges are precomputed and stored.\n\n\n\n\n\n","category":"type"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.EmbeddedDeltaDualComplex2D","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.EmbeddedDeltaDualComplex2D","text":"Embedded dual complex of an embedded 12 delta set.\n\nAlthough they are redundant information, the lengths and areas of the primal/dual edges and triangles are precomputed and stored.\n\n\n\n\n\n","category":"type"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.Incenter","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.Incenter","text":"Incenter, or center of inscribed circle, of a simplex.\n\n\n\n\n\n","category":"type"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.OrientedDeltaDualComplex1D","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.OrientedDeltaDualComplex1D","text":"Oriented dual complex of an oriented 1D delta set.\n\n\n\n\n\n","category":"type"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.OrientedDeltaDualComplex2D","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.OrientedDeltaDualComplex2D","text":"Oriented dual complex of an oriented 2D delta set.\n\n\n\n\n\n","category":"type"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.SimplexCenter","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.SimplexCenter","text":"A notion of \"geometric center\" of a simplex.\n\nSee also: geometric_center.\n\n\n\n\n\n","category":"type"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.:⋆-Union{Tuple{n}, Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet,SimplexForm{n,T,V} where V<:AbstractArray{T,1} where T}} where n","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.:⋆","text":"Hodge star operator from primal n-forms to dual N-n-forms.\n\nwarning: Warning\nSome authors, such as (Hirani 2003) and (Desbrun 2005), use the symbol  for the duality operator on chains and the symbol * for the Hodge star operator on cochains. We do not explicitly define the duality operator and we use the symbol  for the Hodge star.\n\n\n\n\n\n","category":"method"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.codifferential","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.codifferential","text":"Alias for the codifferential operator δ.\n\n\n\n\n\n","category":"function"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.dual_boundary-Tuple{Int64,Catlab.CSetDataStructures.AbstractAttributedCSet,Vararg{Any,N} where N}","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.dual_boundary","text":"Boundary of chain of dual cells.\n\nTranspose of dual_derivative.\n\n\n\n\n\n","category":"method"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.dual_derivative-Tuple{Int64,Catlab.CSetDataStructures.AbstractAttributedCSet,Vararg{Any,N} where N}","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.dual_derivative","text":"Discrete exterior derivative of dual form.\n\nTranspose of dual_boundary. For more info, see (Desbrun, Kanso, Tong, 2008: Discrete differential forms for computational modeling, §4.5).\n\n\n\n\n\n","category":"method"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.dual_point-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet,Vararg{Any,N} where N}","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.dual_point","text":"Point associated with dual vertex of complex.\n\n\n\n\n\n","category":"method"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.dual_triangle_vertices-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet{Catlab.Theories.CatDesc{(:V, :E, :Tri, :DualV, :DualE, :DualTri),(:src, :tgt, :∂e0, :∂e1, :∂e2, :D_∂v0, :D_∂v1, :D_∂e0, :D_∂e1, :D_∂e2, :vertex_center, :edge_center, :tri_center),(2, 2, 3, 3, 3, 5, 5, 6, 6, 6, 1, 2, 3),(1, 1, 2, 2, 2, 4, 4, 5, 5, 5, 4, 4, 4)},AD,Ts} where Ts<:Tuple where AD<:(Catlab.Theories.AttrDesc{Catlab.Theories.CatDesc{(:V, :E, :Tri, :DualV, :DualE, :DualTri),(:src, :tgt, :∂e0, :∂e1, :∂e2, :D_∂v0, :D_∂v1, :D_∂e0, :D_∂e1, :D_∂e2, :vertex_center, :edge_center, :tri_center),(2, 2, 3, 3, 3, 5, 5, 6, 6, 6, 1, 2, 3),(1, 1, 2, 2, 2, 4, 4, 5, 5, 5, 4, 4, 4)},Data,Attr,ADom,ACodom} where ACodom where ADom where Attr where Data),Vararg{Any,N} where N}","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.dual_triangle_vertices","text":"Boundary dual vertices of a  dual triangle\n\nThis accessor assumes that the simplicial identities for the dual hold\n\n\n\n\n\n","category":"method"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.edge_center-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet,Vararg{Any,N} where N}","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.edge_center","text":"Dual vertex corresponding to center of primal edge.\n\n\n\n\n\n","category":"method"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.elementary_duals-Union{Tuple{n}, Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet,Simplex{n,N,Data} where Data where N}} where n","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.elementary_duals","text":"List of elementary dual simplices corresponding to primal simplex.\n\nIn general, in an n-dimensional complex, the elementary duals of primal k-simplices are dual (n-k)-simplices. Thus, in 1D dual complexes, the elementary duals of...\n\nprimal vertices are dual edges\nprimal edges are (single) dual vertices\n\nIn 2D dual complexes, the elementary duals of...\n\nprimal vertices are dual triangles\nprimal edges are dual edges\nprimal triangles are (single) dual triangles\n\n\n\n\n\n","category":"method"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.geometric_center","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.geometric_center","text":"Calculate the center of simplex spanned by given points.\n\nThe first argument is a list of points and the second specifies the notion of \"center\", via an instance of SimplexCenter.\n\n\n\n\n\n","category":"function"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.hodge_star","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.hodge_star","text":"Alias for the Hodge star operator ⋆.\n\n\n\n\n\n","category":"function"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.laplace_beltrami","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.laplace_beltrami","text":"Alias for the Laplace-Beltrami operator Δ.\n\n\n\n\n\n","category":"function"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.subdivide_duals!-Tuple{Catlab.CSetDataStructures.AttributedCSet{Catlab.Theories.CatDesc{(:V, :E, :DualV, :DualE),(:src, :tgt, :D_∂v0, :D_∂v1, :vertex_center, :edge_center),(2, 2, 4, 4, 1, 2),(1, 1, 3, 3, 3, 3)},Catlab.Theories.AttrDesc{Catlab.Theories.CatDesc{(:V, :E, :DualV, :DualE),(:src, :tgt, :D_∂v0, :D_∂v1, :vertex_center, :edge_center),(2, 2, 4, 4, 1, 2),(1, 1, 3, 3, 3, 3)},(:Orientation, :Real, :Point),(:edge_orientation, :D_edge_orientation, :point, :length, :dual_point, :dual_length),(2, 4, 1, 2, 3, 4),(1, 1, 3, 2, 3, 2)},Tuple{Orientation,Real,Point},(:D_∂v0, :D_∂v1, :src, :tgt),(),Tables,Indices} where Indices<:NamedTuple where Tables<:NamedTuple where Point where Real where Orientation,Vararg{Any,N} where N}","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.subdivide_duals!","text":"Compute geometric subdivision for embedded dual complex.\n\nSupports different methods of subdivision through the choice of geometric center, as defined by geometric_center. In particular, barycentric subdivision and circumcentric subdivision are supported.\n\n\n\n\n\n","category":"method"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.triangle_center-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet,Vararg{Any,N} where N}","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.triangle_center","text":"Dual vertex corresponding to center of primal triangle.\n\n\n\n\n\n","category":"method"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.vertex_center-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet,Vararg{Any,N} where N}","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.vertex_center","text":"Dual vertex corresponding to center of primal vertex.\n\n\n\n\n\n","category":"method"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.Δ-Union{Tuple{n}, Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet,SimplexForm{n,T,V} where V<:AbstractArray{T,1} where T}} where n","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.Δ","text":"Laplace-Beltrami operator on discrete forms.\n\nThe linear operator on primal n-forms defined by Δ f = δ d f, where δ is the codifferential and d is the exterior derivative.\n\n\n\n\n\n","category":"method"},{"location":"dual_complexes/#CombinatorialSpaces.DualSimplicialSets.δ-Union{Tuple{n}, Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet,SimplexForm{n,T,V} where V<:AbstractArray{T,1} where T}} where n","page":"Dual complexes","title":"CombinatorialSpaces.DualSimplicialSets.δ","text":"Codifferential operator from primal n forms to primal n-1-forms.\n\n\n\n\n\n","category":"method"},{"location":"simplicial_sets/#Simplicial-sets","page":"Simplicial sets","title":"Simplicial sets","text":"","category":"section"},{"location":"simplicial_sets/","page":"Simplicial sets","title":"Simplicial sets","text":"As a core feature, this package provides data structures and algorithms for a flavor of simplicial sets known as semi-simplicial sets or delta sets. The first section explains how delta sets relate to simplicial complexes and other structures. Readers not interested in these distinctions may proceed directly to the next section, on delta sets.","category":"page"},{"location":"simplicial_sets/#Varieties-of-simplicial-stuff","page":"Simplicial sets","title":"Varieties of simplicial stuff","text":"","category":"section"},{"location":"simplicial_sets/","page":"Simplicial sets","title":"Simplicial sets","text":"A wide, possibly bewildering variety of concepts fall under the heading of \"simplicial stuff,\" including:","category":"page"},{"location":"simplicial_sets/","page":"Simplicial sets","title":"Simplicial sets","text":"simplicial complexes\nabstract simplicial complexes\nsimplicial sets\nsemi-simplicial sets, aka delta sets\naugmented simplicial sets\nsymmetric (simplicial) sets","category":"page"},{"location":"simplicial_sets/","page":"Simplicial sets","title":"Simplicial sets","text":"The most familiar of these are simplicial complexes: coherent collections of n-simplices of different dimensions n embedded in an ambient Euclidean space. A simplicial complex may include points (n=0), line segments (n=1), triangles (n=2), tetrahedra (n=3), and higher-dimensional simplices. Of the structures listed here, only simplicial complexes are geometrical objects. All of the others can be seen as combinatorial abstractions of simplicial complexes.","category":"page"},{"location":"simplicial_sets/","page":"Simplicial sets","title":"Simplicial sets","text":"Abstract simplicial complexes are the oldest and most obvious abstraction of simplicial complexes, but nowadays mathematicians tend to prefer simplicial sets, which enjoy excellent algebraic properties. A simplicial set X consists of sets X_n, for n geq 0, of abstract n-simplices whose n+1 different faces are ordered and hence can be numerically indexed, via the face maps.","category":"page"},{"location":"simplicial_sets/","page":"Simplicial sets","title":"Simplicial sets","text":"In this package, we implement a variant of simplicial sets called semi-simplicial sets, or delta sets for short. The difference is that delta sets contain only the face maps, whereas simplicial sets also contain degeneracy maps. The main effect of the degeneracy maps is to enlarge the space of simplicial morphisms by allowing simplices to be \"collapsed\" onto lower-dimensional ones. Degeneracy maps have their pros and cons, and in the future we will likely provide simplicial sets as well as semi-simplicial ones. For more details, the paper by Greg Friedman is an excellent illustrated introduction to semi-simplicial and simplicial sets.","category":"page"},{"location":"simplicial_sets/","page":"Simplicial sets","title":"Simplicial sets","text":"Simplicial sets generalize graphs from one dimension to higher dimensions. The following table gives the precise correspondence between different flavors of simplicial stuff and graphs.","category":"page"},{"location":"simplicial_sets/","page":"Simplicial sets","title":"Simplicial sets","text":"1-dimensional n-dimensional\nstraight-line embedded graph simplicial complex\nsimple graph abstract simplicial complex\ngraph semi-simplicial set\nreflexive graph simplicial set\nsymmetric graph symmetric semi-simplicial set\nsymmetric reflexive graph symmetric simplicial set","category":"page"},{"location":"simplicial_sets/","page":"Simplicial sets","title":"Simplicial sets","text":"note: Note\nIn this table, as in this package and the rest of the AlgebraicJulia  ecosystem, a graph without qualification is always a category theorist's graph (a directed multigraph), not a simple graph (an undirected graph with no self-loops or multiple edges).","category":"page"},{"location":"simplicial_sets/#Ordered-faces-in-geometric-applications","page":"Simplicial sets","title":"Ordered faces in geometric applications","text":"","category":"section"},{"location":"simplicial_sets/","page":"Simplicial sets","title":"Simplicial sets","text":"That the faces of each simplex in a simplicial set are ordered is convenient for many purposes but may seem problematic for geometric applications, where the faces usually regarded as unordered.","category":"page"},{"location":"simplicial_sets/","page":"Simplicial sets","title":"Simplicial sets","text":"One solution to this problem would be to use symmetric simplicial sets, which are simplicial sets X equipped with an action of the symmetric group S_n+1 on the n-simplices X_n, for every n. This is computationally inconvenient because every \"unordered n-simplex\" is then really an equivalence class of (n+1) different n-simplices, a number that grows rapidly with n. At this time, symmetric simplicial sets of dimension greater than 1 are not implemented in this package.","category":"page"},{"location":"simplicial_sets/","page":"Simplicial sets","title":"Simplicial sets","text":"To simulate unordered simplicial sets, we instead adopt the convention of a choosing the representative of the equivalence class that orders the vertices of the simplex according to the integer IDs of the vertices. The simplicial set then \"presents\" a symmetric simplicial set in a canonical way. Indeed, the standard method of converting an abstract simplicial complex to a simplicial set is to pick a total ordering of its vertices. When following this convention, use the functions add_sorted_edge! and glue_sorted_triangle!, which automatically sort their inputs to ensure that the ordering condition is satisfied, rather than the functions add_edge! and glue_triangle!.","category":"page"},{"location":"simplicial_sets/#Delta-sets","page":"Simplicial sets","title":"Delta sets","text":"","category":"section"},{"location":"simplicial_sets/","page":"Simplicial sets","title":"Simplicial sets","text":"A delta set X is a family of sets X_n for n = 012dots, called the n-simplices, together with functions","category":"page"},{"location":"simplicial_sets/","page":"Simplicial sets","title":"Simplicial sets","text":"X(partial_n^i) X_n to X_n-1 qquad n geq 1 quad i=01dotsn","category":"page"},{"location":"simplicial_sets/","page":"Simplicial sets","title":"Simplicial sets","text":"called the face maps, which must satisfy the semi-simplicial identities","category":"page"},{"location":"simplicial_sets/","page":"Simplicial sets","title":"Simplicial sets","text":"X(partial_n+1^i) cdot X(partial_n^j)\n  = X(partial_n+1^j+1) cdot X(partial_n^i) X_n+1 to X_n-1\n  qquad 0 leq i leq j leq n","category":"page"},{"location":"simplicial_sets/","page":"Simplicial sets","title":"Simplicial sets","text":"The function X(partial_n^i) X_n to X_n-1 gives the face of an n-simplex that is opposite its i-th vertex. The semi-simplicial identities then ensure that the faces of each n-simplex fit together properly, for example, that the edges of a 2-simplex actually form a triangle.","category":"page"},{"location":"simplicial_sets/","page":"Simplicial sets","title":"Simplicial sets","text":"In our implementation, the generic function ∂ supplies all the face maps of a delta set. Specifically, the function call ∂(i, n, x, k) gives the i-th face of the n-simplex in the delta set x with index k, and the call ∂(i, n, x) gives the i-faces of all n-simplices in the delta set x, which is a vector of integers.","category":"page"},{"location":"simplicial_sets/","page":"Simplicial sets","title":"Simplicial sets","text":"A finite delta set—the only kind supported here—has no simplices above a certain dimension. For any fixed N, an N-dimensional delta set is a delta set X such that X_n = emptyset for n  N. CombinatorialSpaces provides dedicated data structures for delta sets of a given dimension.","category":"page"},{"location":"simplicial_sets/#D-delta-sets","page":"Simplicial sets","title":"1D delta sets","text":"","category":"section"},{"location":"simplicial_sets/","page":"Simplicial sets","title":"Simplicial sets","text":"Since a one-dimensional delta set is the same thing as a graph, the type DeltaSet1D has the same methods as the type Graph in Catlab.Graphs, which should be consulted for further documentation.","category":"page"},{"location":"simplicial_sets/","page":"Simplicial sets","title":"Simplicial sets","text":"using CombinatorialSpaces # hide\n\ndset = DeltaSet1D()\nadd_vertices!(dset, 4)\nadd_edges!(dset, [1,2,2], [2,3,4])\ndset","category":"page"},{"location":"simplicial_sets/","page":"Simplicial sets","title":"Simplicial sets","text":"One potentially confusing point is that the face map partial_1^0 gives the target vertex (the vertex of an edge opposite vertex 0), while the face map partial_1^1 gives the source vertex (the vertex of an edge opposite vertex 1).","category":"page"},{"location":"simplicial_sets/","page":"Simplicial sets","title":"Simplicial sets","text":"@assert ∂(1,0,dset) == tgt(dset)\n@assert ∂(1,1,dset) == src(dset)","category":"page"},{"location":"simplicial_sets/#D-delta-sets-2","page":"Simplicial sets","title":"2D delta sets","text":"","category":"section"},{"location":"simplicial_sets/","page":"Simplicial sets","title":"Simplicial sets","text":"Two-dimensional delta sets, comprised of vertices, edges, and triangles, are supplied by the type DeltaSet2D. There are two ways to add triangles to a delta set. If appropriately arranged edges have already been added, a triangle having those edges as boundary can be added using the add_triangle! function. However, it often more convenient to use the glue_triangle! function, which takes vertices rather than edges as arguments, creating any boundary edges that do not already exist.","category":"page"},{"location":"simplicial_sets/","page":"Simplicial sets","title":"Simplicial sets","text":"For example, the following 2D delta set has the shape of a triangulated commutative square.","category":"page"},{"location":"simplicial_sets/","page":"Simplicial sets","title":"Simplicial sets","text":"using CombinatorialSpaces # hide\n\ndset = DeltaSet2D()\nadd_vertices!(dset, 4)\nglue_triangle!(dset, 1, 2, 3)\nglue_triangle!(dset, 1, 4, 3)\ndset","category":"page"},{"location":"simplicial_sets/","page":"Simplicial sets","title":"Simplicial sets","text":"As the table above illustrates, only the edges of each triangle are explicitly stored. The vertices of a triangle can be accessed using the function triangle_vertices. The correctness of this function depends on the semi-simplicial identities.","category":"page"},{"location":"simplicial_sets/","page":"Simplicial sets","title":"Simplicial sets","text":"map(triangles(dset)) do t\n  triangle_vertices(dset, t)\nend","category":"page"},{"location":"simplicial_sets/#API-docs","page":"Simplicial sets","title":"API docs","text":"","category":"section"},{"location":"simplicial_sets/","page":"Simplicial sets","title":"Simplicial sets","text":"Modules = [ SimplicialSets ]\nPrivate = false","category":"page"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets","text":"Simplicial sets in one, two, and three dimensions.\n\nFor the time being, this module provides data structures only for delta sets, also known as semi-simplicial sets. These include the face maps but not the degeneracy maps of a simplicial set. In the future we may add support for simplicial sets. The analogy to keep in mind is that graphs are to semi-simpicial sets as reflexive graphs are to simplicial sets.\n\n\n\n\n\n","category":"module"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.AbstractDeltaSet1D","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.AbstractDeltaSet1D","text":"Abstract type for 1D delta sets.\n\n\n\n\n\n","category":"type"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.AbstractDeltaSet2D","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.AbstractDeltaSet2D","text":"Abstract type for 2D delta sets.\n\n\n\n\n\n","category":"type"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.DeltaSet1D","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.DeltaSet1D","text":"A one-dimensional delta set, aka semi-simplicial set.\n\nDelta sets in 1D are the same as graphs, and this type is just an alias for Graph. The face maps ∂ translates the graph-theoretic terminology into simplicial terminology.\n\n\n\n\n\n","category":"type"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.DeltaSet2D","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.DeltaSet2D","text":"A 2D delta set, aka semi-simplicial set.\n\nThe triangles in a semi-simpicial set can be interpreted in several ways. Geometrically, they are triangles (2-simplices) whose three edges are directed according to a specific pattern, determined by the ordering of the vertices or equivalently by the simplicial identities. This geometric perspective is present through the subpart names ∂e0, ∂e1, and ∂e2 and through the boundary map ∂. Alternatively, the triangle can be interpreted as a higher-dimensional link or morphism, going from two edges in sequence (which might be called src2_first and src2_last) to a transitive edge (say tgt2). This is the shape of the binary composition operation in a category.\n\n\n\n\n\n","category":"type"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.E","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.E","text":"Edge in simplicial set: alias for Simplex{1}.\n\n\n\n\n\n","category":"type"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.EmbeddedDeltaSet1D","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.EmbeddedDeltaSet1D","text":"A one-dimensional, embedded, oriented delta set.\n\n\n\n\n\n","category":"type"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.EmbeddedDeltaSet2D","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.EmbeddedDeltaSet2D","text":"A two-dimensional, embedded, oriented delta set.\n\n\n\n\n\n","category":"type"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.OrientedDeltaSet1D","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.OrientedDeltaSet1D","text":"A one-dimensional oriented delta set.\n\nEdges are oriented from source to target when edge_orientation is true/positive and from target to source when it is false/negative.\n\n\n\n\n\n","category":"type"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.OrientedDeltaSet2D","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.OrientedDeltaSet2D","text":"A two-dimensional oriented delta set.\n\nTriangles are ordered in the cyclic order (012) when tri_orientation is true/positive and in the reverse order when it is false/negative.\n\n\n\n\n\n","category":"type"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.Simplex","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.Simplex","text":"Wrapper for simplex or simplices of dimension n.\n\nSee also: V, E, Tri.\n\n\n\n\n\n","category":"type"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.SimplexChain","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.SimplexChain","text":"Wrapper for chain of oriented simplices of dimension n.\n\n\n\n\n\n","category":"type"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.SimplexForm","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.SimplexForm","text":"Wrapper for discrete form, aka cochain, in simplicial set.\n\n\n\n\n\n","category":"type"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.Tri","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.Tri","text":"Triangle in simplicial set: alias for Simplex{2}.\n\n\n\n\n\n","category":"type"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.V","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.V","text":"Vertex in simplicial set: alias for Simplex{0}.\n\n\n\n\n\n","category":"type"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.add_sorted_edge!-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet,Int64,Int64}","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.add_sorted_edge!","text":"Add edge to simplicial set, respecting the order of the vertex IDs.\n\n\n\n\n\n","category":"method"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.add_sorted_edges!-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet,AbstractArray{Int64,1},AbstractArray{Int64,1}}","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.add_sorted_edges!","text":"Add edges to simplicial set, respecting the order of the vertex IDs.\n\n\n\n\n\n","category":"method"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.add_triangle!-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet,Int64,Int64,Int64}","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.add_triangle!","text":"Add a triangle (2-simplex) to a simplicial set, given its boundary edges.\n\nIn the arguments to this function, the boundary edges have the order 0  1, 1  2, 0  2.\n\nwarning: Warning\nThis low-level function does not check the simplicial identities. It is your responsibility to ensure they are satisfied. By contrast, triangles added using the function glue_triangle! always satisfy the simplicial identities, by construction. Thus it is often easier to use this function.\n\n\n\n\n\n","category":"method"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.boundary","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.boundary","text":"Alias for the face map and boundary operator ∂.\n\n\n\n\n\n","category":"function"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.coboundary","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.coboundary","text":"Alias for the coboundary operator d.\n\n\n\n\n\n","category":"function"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.d-Union{Tuple{n}, Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet,SimplexForm{n,T,V} where V<:AbstractArray{T,1} where T}} where n","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.d","text":"The discrete exterior derivative, aka the coboundary operator.\n\n\n\n\n\n","category":"method"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.edge_vertices-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet,Vararg{Any,N} where N}","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.edge_vertices","text":"Boundary vertices of an edge.\n\n\n\n\n\n","category":"method"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.exterior_derivative","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.exterior_derivative","text":"Alias for the discrete exterior derivative d.\n\n\n\n\n\n","category":"function"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.glue_sorted_triangle!-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet,Int64,Int64,Int64}","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.glue_sorted_triangle!","text":"Glue a triangle onto a simplicial set, respecting the order of the vertices.\n\n\n\n\n\n","category":"method"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.glue_triangle!-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet,Int64,Int64,Int64}","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.glue_triangle!","text":"Glue a triangle onto a simplicial set, given its boundary vertices.\n\nIf a needed edge between two vertices exists, it is reused (hence the \"gluing\"); otherwise, it is created.\n\n\n\n\n\n","category":"method"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.nsimplices-Tuple{Int64,Catlab.CSetDataStructures.AbstractAttributedCSet}","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.nsimplices","text":"Number of simplices of given dimension in a simplicial set.\n\n\n\n\n\n","category":"method"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.orient!-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet{Catlab.Theories.CatDesc{(:V, :E),(:src, :tgt),(2, 2),(1, 1)},AD,Ts} where Ts<:Tuple where AD<:(Catlab.Theories.AttrDesc{Catlab.Theories.CatDesc{(:V, :E),(:src, :tgt),(2, 2),(1, 1)},Data,Attr,ADom,ACodom} where ACodom where ADom where Attr where Data)}","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.orient!","text":"Consistently orient simplices in a simplicial set, if possible.\n\nTwo simplices with a common face are consistently oriented if they induce opposite orientations on the shared face. This function attempts to consistently orient all simplices of a given dimension and returns whether this has been achieved. Each connected component is oriently independently using the helper function orient_component!.\n\n\n\n\n\n","category":"method"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.orient_component!-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet{Catlab.Theories.CatDesc{(:V, :E),(:src, :tgt),(2, 2),(1, 1)},AD,Ts} where Ts<:Tuple where AD<:(Catlab.Theories.AttrDesc{Catlab.Theories.CatDesc{(:V, :E),(:src, :tgt),(2, 2),(1, 1)},Data,Attr,ADom,ACodom} where ACodom where ADom where Attr where Data),Int64,Vararg{Any,N} where N}","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.orient_component!","text":"Consistently orient simplices in the same connected component, if possible.\n\nGiven an n-simplex and a choice of orientation for it, this function attempts to consistently orient all n-simplices that may be reached from it by traversing (n-1)-faces. The traversal is depth-first. If a consistent orientation is possible, the function returns true and the orientations are assigned; otherwise, it returns false and no orientations are changed.\n\nIf the simplicial set is not connected, the function orient! may be more convenient.\n\n\n\n\n\n","category":"method"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.orientation-Union{Tuple{n}, Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet,Simplex{n,N,Data} where Data where N}} where n","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.orientation","text":"Orientation of simplex.\n\n\n\n\n\n","category":"method"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.point-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet,Vararg{Any,N} where N}","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.point","text":"Point associated with vertex of complex.\n\n\n\n\n\n","category":"method"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.set_orientation!-Tuple{Int64,Catlab.CSetDataStructures.AbstractAttributedCSet,Vararg{Any,N} where N}","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.set_orientation!","text":"Set orientation of simplex.\n\n\n\n\n\n","category":"method"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.simplices-Tuple{Int64,Catlab.CSetDataStructures.AbstractAttributedCSet}","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.simplices","text":"Simplices of given dimension in a simplicial set.\n\n\n\n\n\n","category":"method"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.triangle_vertices-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet,Vararg{Any,N} where N}","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.triangle_vertices","text":"Boundary vertices of a triangle.\n\nThis accessor assumes that the simplicial identities hold.\n\n\n\n\n\n","category":"method"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.volume-Tuple{Any}","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.volume","text":"n-dimensional volume of n-simplex spanned by given n+1 points.\n\n\n\n\n\n","category":"method"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.volume-Union{Tuple{n}, Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet,Simplex{n,N,Data} where Data where N,Vararg{Any,N} where N}} where n","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.volume","text":"n-dimensional volume of n-simplex in an embedded simplicial set.\n\n\n\n\n\n","category":"method"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.∂-Union{Tuple{n}, Tuple{Int64,Catlab.CSetDataStructures.AbstractAttributedCSet,Simplex{n,N,Data} where Data where N}} where n","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.∂","text":"Face map and boundary operator on simplicial sets.\n\nGiven numbers n and 0 <= i <= n and a simplicial set of dimension at least n, the ith face map is implemented by the call\n\n∂(n, i, s, ...)\n\nThe boundary operator on n-faces and n-chains is implemented by the call\n\n∂(n, s, ...)\n\nNote that the face map returns simplices, while the boundary operator returns chains (vectors in the free vector space spanned by oriented simplices).\n\n\n\n\n\n","category":"method"},{"location":"combinatorial_maps/#Combinatorial-maps","page":"Combinatorial maps","title":"Combinatorial maps","text":"","category":"section"},{"location":"combinatorial_maps/","page":"Combinatorial maps","title":"Combinatorial maps","text":"CombinatorialSpaces has incomplete, experimental support for several combinatorial structures used in topological graph theory, such as combinatorial maps and rotation systems. For an introduction to rotation systems and their implementation, see this blog post at the AlgebraicJulia blog.","category":"page"},{"location":"combinatorial_maps/#API-docs","page":"Combinatorial maps","title":"API docs","text":"","category":"section"},{"location":"combinatorial_maps/","page":"Combinatorial maps","title":"Combinatorial maps","text":"Modules = [ CombinatorialSpaces.CombinatorialMaps ]\nPrivate = false","category":"page"},{"location":"combinatorial_maps/#CombinatorialSpaces.CombinatorialMaps","page":"Combinatorial maps","title":"CombinatorialSpaces.CombinatorialMaps","text":"Combinatorial maps and related structures, as C-sets.\n\nIn topological graph theory and graph drawing, an embedded graph is a combinatorial structure representing a graph embedded in an (oriented) surface, up to equivalence under (orientation-preserving) homeomorphism. This module defines data structures for rotation systems, combinatorial maps, and other combinatorial objects describing embedded graphs.\n\n\n\n\n\n","category":"module"},{"location":"combinatorial_maps/#CombinatorialSpaces.CombinatorialMaps.add_corolla!-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet{Catlab.Theories.CatDesc{(:V, :H),(:vertex, :inv, :σ),(2, 2, 2),(1, 2, 2)},AD,Ts} where Ts<:Tuple where AD<:(Catlab.Theories.AttrDesc{Catlab.Theories.CatDesc{(:V, :H),(:vertex, :inv, :σ),(2, 2, 2),(1, 2, 2)},Data,Attr,ADom,ACodom} where ACodom where ADom where Attr where Data),Int64}","page":"Combinatorial maps","title":"CombinatorialSpaces.CombinatorialMaps.add_corolla!","text":"Add corolla to rotation graph, rotation system, or similar structure.\n\nA corolla is a vertex together with its incident half-edges, the number of which is its valence. The rotation on the half-edges is the consecutive one induced by the half-edge part numbers.\n\n\n\n\n\n","category":"method"},{"location":"combinatorial_maps/#CombinatorialSpaces.CombinatorialMaps.pair_half_edges!-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet{Catlab.Theories.CatDesc{(:V, :H),(:vertex, :inv, :σ),(2, 2, 2),(1, 2, 2)},AD,Ts} where Ts<:Tuple where AD<:(Catlab.Theories.AttrDesc{Catlab.Theories.CatDesc{(:V, :H),(:vertex, :inv, :σ),(2, 2, 2),(1, 2, 2)},Data,Attr,ADom,ACodom} where ACodom where ADom where Attr where Data),Any,Any}","page":"Combinatorial maps","title":"CombinatorialSpaces.CombinatorialMaps.pair_half_edges!","text":"Pair together half-edges into edges.\n\n\n\n\n\n","category":"method"},{"location":"combinatorial_maps/#CombinatorialSpaces.CombinatorialMaps.trace_edges-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet}","page":"Combinatorial maps","title":"CombinatorialSpaces.CombinatorialMaps.trace_edges","text":"Trace edges of combinatorial map or similar, return a listing of cycles.\n\nUsually the cycles will be pairs of half edges but in a hypermap the cycles can be arbitrary.\n\n\n\n\n\n","category":"method"},{"location":"combinatorial_maps/#CombinatorialSpaces.CombinatorialMaps.trace_faces-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet}","page":"Combinatorial maps","title":"CombinatorialSpaces.CombinatorialMaps.trace_faces","text":"Trace faces of combinatorial map or similar, returning list of cycles.\n\n\n\n\n\n","category":"method"},{"location":"combinatorial_maps/#CombinatorialSpaces.CombinatorialMaps.trace_vertices-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet}","page":"Combinatorial maps","title":"CombinatorialSpaces.CombinatorialMaps.trace_vertices","text":"Trace vertices of combinatorial map or similar, returning a list of cycles.\n\n\n\n\n\n","category":"method"},{"location":"combinatorial_maps/#CombinatorialSpaces.CombinatorialMaps.α-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet,Vararg{Any,N} where N}","page":"Combinatorial maps","title":"CombinatorialSpaces.CombinatorialMaps.α","text":"Edge permutation of combinatorial map or similar structure.\n\n\n\n\n\n","category":"method"},{"location":"combinatorial_maps/#CombinatorialSpaces.CombinatorialMaps.σ-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet,Vararg{Any,N} where N}","page":"Combinatorial maps","title":"CombinatorialSpaces.CombinatorialMaps.σ","text":"Vertex permutation of combinatorial map or similar structure.\n\n\n\n\n\n","category":"method"},{"location":"combinatorial_maps/#CombinatorialSpaces.CombinatorialMaps.ϕ-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet,Vararg{Any,N} where N}","page":"Combinatorial maps","title":"CombinatorialSpaces.CombinatorialMaps.ϕ","text":"Face permutation of combinatorial map or similar structure.\n\n\n\n\n\n","category":"method"},{"location":"#CombinatorialSpaces.jl","page":"CombinatorialSpaces.jl","title":"CombinatorialSpaces.jl","text":"","category":"section"},{"location":"","page":"CombinatorialSpaces.jl","title":"CombinatorialSpaces.jl","text":"This package provides combinatorial models of geometric spaces, such as simplicial sets and combinatorial maps. These \"combinatorial spaces\" are useful in computational physics, computer graphics, and other applications where geometry plays a large role. They are also potentially useful in non-geometric applications, since structures like simplicial sets generalize graphs from binary relations to higher-arity relations.","category":"page"},{"location":"","page":"CombinatorialSpaces.jl","title":"CombinatorialSpaces.jl","text":"Combinatorial spaces, like graphs, are typically C-sets (copresheaves) on some category C. They are implemented here using the general data structures for C-sets offered by Catlab.jl. Thus, this package complements and extends the family of graph data structures shipped with Catlab in the module Catlab.Graphs.","category":"page"},{"location":"","page":"CombinatorialSpaces.jl","title":"CombinatorialSpaces.jl","text":"Current features include:","category":"page"},{"location":"","page":"CombinatorialSpaces.jl","title":"CombinatorialSpaces.jl","text":"delta sets (semi-simplicial sets) in dimensions one and two, optionally oriented and/or embedded in Euclidean space\nconstruction of the dual complex associated with a delta set, via combinatorial and geometric subdivision\ncore operators of the discrete exterior calculus, including the boundary, exterior deriviative, Hodge star, codifferential, and Laplace-Beltrami operators\nexperimental support for rotation systems and combinatorial maps","category":"page"},{"location":"#Installation","page":"CombinatorialSpaces.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"CombinatorialSpaces.jl","title":"CombinatorialSpaces.jl","text":"To install this package, open the Julia shell, press ] to enter Pkg mode, and run the command","category":"page"},{"location":"","page":"CombinatorialSpaces.jl","title":"CombinatorialSpaces.jl","text":"(@v1.5) pkg> add CombinatorialSpaces","category":"page"},{"location":"meshes/#Meshes","page":"Meshes","title":"Meshes","text":"","category":"section"},{"location":"meshes/","page":"Meshes","title":"Meshes","text":"using JSServe # hide\nPage(exportable=true, offline=true) # hide","category":"page"},{"location":"meshes/","page":"Meshes","title":"Meshes","text":"The two-dimensional embedded delta sets (EmbeddedDeltaSet2D) in CombinatorialSpaces can be converted to and from mesh objects (Mesh) in Meshes.jl. This is useful for interoperation with packages in the JuliaGeometry ecosystem.","category":"page"},{"location":"meshes/#Visualizing-embedded-delta-sets","page":"Meshes","title":"Visualizing embedded delta sets","text":"","category":"section"},{"location":"meshes/","page":"Meshes","title":"Meshes","text":"The following example shows how to import a mesh from an OBJ file, convert it into an embedded delta set, and render it as a 3D mesh using WGLMakie.","category":"page"},{"location":"meshes/","page":"Meshes","title":"Meshes","text":"using FileIO, WGLMakie, CombinatorialSpaces\nset_theme!(resolution=(800, 400))\ncatmesh = FileIO.load(File{format\"OBJ\"}(download(\n  \"https://raw.githubusercontent.com/JuliaPlots/GLMakie.jl/master/src/GLVisualize/assets/cat.obj\")))\n\ncatmesh_dset = EmbeddedDeltaSet2D(catmesh)\nmesh(catmesh_dset, shading=false)","category":"page"},{"location":"meshes/","page":"Meshes","title":"Meshes","text":"Alterntively, the embedded delta set can be visualized as a wireframe:","category":"page"},{"location":"meshes/","page":"Meshes","title":"Meshes","text":"wireframe(catmesh_dset)","category":"page"},{"location":"meshes/","page":"Meshes","title":"Meshes","text":"We can also construct and plot the dual complex for this mesh:","category":"page"},{"location":"meshes/","page":"Meshes","title":"Meshes","text":"dual = EmbeddedDeltaDualComplex2D{Bool, Float32, Point{3,Float32}}(catmesh_dset)\nsubdivide_duals!(dual, Barycenter())\nwireframe(dual)","category":"page"},{"location":"meshes/#API-docs","page":"Meshes","title":"API docs","text":"","category":"section"},{"location":"meshes/","page":"Meshes","title":"Meshes","text":"Modules = [ MeshInterop ]\nPrivate = false","category":"page"},{"location":"meshes/#CombinatorialSpaces.MeshInterop","page":"Meshes","title":"CombinatorialSpaces.MeshInterop","text":"Mesh Tools This file includes tools for importing delta sets from mesh files supported by MeshIO and for converting delta sets to meshes (for the purposes of plotting.\n\nMeshes here are stored in the GeometryBasics.Mesh object.\n\n\n\n\n\n","category":"module"},{"location":"meshes/#CombinatorialSpaces.SimplicialSets.EmbeddedDeltaSet2D-Tuple{Mesh}","page":"Meshes","title":"CombinatorialSpaces.SimplicialSets.EmbeddedDeltaSet2D","text":"Constructor for EmbeddedDeltaSet2D from GeometryBasics.Mesh object\n\nThis operator should work for any triangular mesh object. Note that it will not preserve any normal, texture, or other attributes from the Mesh object.\n\n\n\n\n\n","category":"method"},{"location":"meshes/#CombinatorialSpaces.SimplicialSets.EmbeddedDeltaSet2D-Tuple{String}","page":"Meshes","title":"CombinatorialSpaces.SimplicialSets.EmbeddedDeltaSet2D","text":"Constructor for EmbeddedDeltaSet2D from mesh file\n\nThis operator should work for any file support for import from MeshIO. Note that it will not preserve any normal, texture, or other data beyond points and triangles from the mesh file.\n\n\n\n\n\n","category":"method"},{"location":"meshes/#GeometryBasics.Mesh-Tuple{Catlab.CSetDataStructures.AttributedCSet{Catlab.Theories.CatDesc{(:V, :E, :Tri),(:src, :tgt, :∂e0, :∂e1, :∂e2),(2, 2, 3, 3, 3),(1, 1, 2, 2, 2)},Catlab.Theories.AttrDesc{Catlab.Theories.CatDesc{(:V, :E, :Tri),(:src, :tgt, :∂e0, :∂e1, :∂e2),(2, 2, 3, 3, 3),(1, 1, 2, 2, 2)},(:Orientation, :Point),(:edge_orientation, :tri_orientation, :point),(2, 3, 1),(1, 1, 2)},Tuple{Orientation,Point},(:src, :tgt, :∂e0, :∂e1, :∂e2),(),Tables,Indices} where Indices<:NamedTuple where Tables<:NamedTuple where Point where Orientation}","page":"Meshes","title":"GeometryBasics.Mesh","text":"Construct a GeometryBasics.Mesh object from an embedded delta set\n\n\n\n\n\n","category":"method"},{"location":"meshes/#GeometryBasics.Mesh-Union{Tuple{Catlab.CSetDataStructures.AttributedCSet{Catlab.Theories.CatDesc{(:V, :E, :Tri, :DualV, :DualE, :DualTri),(:src, :tgt, :∂e0, :∂e1, :∂e2, :D_∂v0, :D_∂v1, :D_∂e0, :D_∂e1, :D_∂e2, :vertex_center, :edge_center, :tri_center),(2, 2, 3, 3, 3, 5, 5, 6, 6, 6, 1, 2, 3),(1, 1, 2, 2, 2, 4, 4, 5, 5, 5, 4, 4, 4)},Catlab.Theories.AttrDesc{Catlab.Theories.CatDesc{(:V, :E, :Tri, :DualV, :DualE, :DualTri),(:src, :tgt, :∂e0, :∂e1, :∂e2, :D_∂v0, :D_∂v1, :D_∂e0, :D_∂e1, :D_∂e2, :vertex_center, :edge_center, :tri_center),(2, 2, 3, 3, 3, 5, 5, 6, 6, 6, 1, 2, 3),(1, 1, 2, 2, 2, 4, 4, 5, 5, 5, 4, 4, 4)},(:Orientation, :Real, :Point),(:edge_orientation, :tri_orientation, :D_edge_orientation, :D_tri_orientation, :point, :length, :area, :dual_point, :dual_length, :dual_area),(2, 3, 5, 6, 1, 2, 3, 4, 5, 6),(1, 1, 1, 1, 3, 2, 2, 3, 2, 2)},Tuple{O,R,P},(:D_∂e0, :D_∂e1, :D_∂e2, :D_∂v0, :D_∂v1, :src, :tgt, :∂e0, :∂e1, :∂e2),(),Tables,Indices} where Indices<:NamedTuple where Tables<:NamedTuple}, Tuple{P}, Tuple{R}, Tuple{O}} where P where R where O","page":"Meshes","title":"GeometryBasics.Mesh","text":"Construct a GeometryBasics.Mesh object from a dual embedded delta set\n\n\n\n\n\n","category":"method"}]
}
