var documenterSearchIndex = {"docs":
[{"location":"simplicial_sets/#Simplicial-sets","page":"Simplicial sets","title":"Simplicial sets","text":"","category":"section"},{"location":"simplicial_sets/","page":"Simplicial sets","title":"Simplicial sets","text":"Modules = [ SimplicialSets ]\nPrivate = false","category":"page"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets","text":"Simplicial sets in one, two, and three dimensions.\n\nFor the time being, this module provides data structures only for delta sets, also known as semi-simplicial sets. These include the face maps but not the degeneracy maps of a simplicial set. In the future we may add support for simplicial sets. The analogy to keep in mind is that graphs are to semi-simpicial sets as reflexive graphs are to simplicial sets.\n\nSimplicial sets are inherently ordered structures. The \"unordered\" analogue of simplicial sets are symmetric simplicial sets, sometimes called just \"symmetric sets.\" In one dimension, symmetric semi-simplicial sets are symmetric graphs.\n\nThis module does not implement symmetric simplicial sets as such. However, symmetric sets can be simulated with simplicial sets by enforcing that the ordering of the vertices of each face matches the ordering of the integer vertex IDs. The simplicial set then \"presents\" a symmetric set in a canonical way. The functions add_sorted_edge! and glue_sorted_triangle! automatically sort their inputs to ensure that the ordering condition is satisfied.\n\n\n\n\n\n","category":"module"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.AbstractDeltaSet1D","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.AbstractDeltaSet1D","text":"Abstract type for 1D delta sets.\n\n\n\n\n\n","category":"type"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.AbstractDeltaSet2D","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.AbstractDeltaSet2D","text":"Abstract type for 2D delta sets.\n\n\n\n\n\n","category":"type"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.DeltaSet1D","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.DeltaSet1D","text":"A one-dimensional delta set, aka semi-simplicial set.\n\nDelta sets in 1D are the same as graphs, and this type is just an alias for Graph. The boundary operator ∂₁ translates the graph-theoretic terminology into simplicial terminology.\n\n\n\n\n\n","category":"type"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.DeltaSet2D","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.DeltaSet2D","text":"A 2D delta set, aka semi-simplicial set.\n\nThe triangles in a semi-simpicial set can be interpreted in several ways. Geometrically, they are triangles (2-simplices) whose three edges are directed according to a specific pattern, determined by the ordering of the vertices or equivalently by the simplicial identities. This geometric perspective is present through the subpart names ∂e0, ∂e1, and ∂e2 and through the boundary map [∂₂](@ref). Alternatively, the triangle can be interpreted as a higher-dimensional link or morphism, going from two edges in sequence (which might be called src2_first and src2_last) to a transitive edge (say tgt2). This is the shape of the binary composition operation in a category.\n\n\n\n\n\n","category":"type"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.OrientedDeltaSet1D","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.OrientedDeltaSet1D","text":"A one-dimensional oriented delta set.\n\nEdges are oriented from source to target when edge_orientation is true/positive and from target to source when it is false/negative.\n\n\n\n\n\n","category":"type"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.OrientedDeltaSet2D","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.OrientedDeltaSet2D","text":"A two-dimensional oriented delta set.\n\nTriangles are ordered in the cyclic order (012) (with numbers defined by triangle_vertex) when tri_orientation is true/positive and in the reverse order when it is false/negative.\n\n\n\n\n\n","category":"type"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.add_sorted_edge!-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet,Int64,Int64}","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.add_sorted_edge!","text":"Add edge to simplicial set, respecting the order of the vertex IDs.\n\n\n\n\n\n","category":"method"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.add_sorted_edges!-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet,AbstractArray{Int64,1},AbstractArray{Int64,1}}","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.add_sorted_edges!","text":"Add edges to simplicial set, respecting the order of the vertex IDs.\n\n\n\n\n\n","category":"method"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.add_triangle!-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet,Int64,Int64,Int64}","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.add_triangle!","text":"Add a triangle (2-simplex) to a simplicial set, given its boundary edges.\n\nIn the arguments to this function, the boundary edges have the order 0  1, 1  2, 0 - 2.\n\nwarning: Warning\nThis low-level function does not check the simplicial identities. It is your responsibility to ensure they are satisfied. By contrast, triangles added using the function glue_triangle! always satisfy the simplicial identities, by construction. Thus it is often easier to use this function.\n\n\n\n\n\n","category":"method"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.boundary","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.boundary","text":"Alias for the face map and boundary operator ∂.\n\n\n\n\n\n","category":"function"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.coboundary","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.coboundary","text":"Alias for the coboundary operator d.\n\n\n\n\n\n","category":"function"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.d-Tuple{Int64,Catlab.CSetDataStructures.AbstractAttributedCSet,Vararg{Any,N} where N}","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.d","text":"The discrete exterior derivative, aka the coboundary operator.\n\n\n\n\n\n","category":"method"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.edge_sign-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet,Vararg{Any,N} where N}","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.edge_sign","text":"Sign (±1) associated with edge orientation.\n\n\n\n\n\n","category":"method"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.exterior_derivative","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.exterior_derivative","text":"Alias for the discrete exterior derivative d.\n\n\n\n\n\n","category":"function"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.glue_sorted_triangle!-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet,Int64,Int64,Int64}","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.glue_sorted_triangle!","text":"Glue a triangle onto a simplicial set, respecting the order of the vertices.\n\n\n\n\n\n","category":"method"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.glue_triangle!-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet,Int64,Int64,Int64}","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.glue_triangle!","text":"Glue a triangle onto a simplicial set, given its boundary vertices.\n\nIf a needed edge between two vertices exists, it is reused (hence the \"gluing\"); otherwise, it is created.\n\n\n\n\n\n","category":"method"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.triangle_sign-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet,Vararg{Any,N} where N}","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.triangle_sign","text":"Sign (±1) associated with triangle orientation.\n\n\n\n\n\n","category":"method"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.triangle_vertex-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet,Int64,Vararg{Any,N} where N}","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.triangle_vertex","text":"Boundary vertex of a triangle.\n\nThis accessor assumes that the simplicial identities hold.\n\n\n\n\n\n","category":"method"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.∂-Tuple{Int64,Int64,Catlab.CSetDataStructures.AbstractAttributedCSet,Vararg{Any,N} where N}","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.∂","text":"Face map and boundary operator on simplicial sets.\n\nGiven numbers n and 0 <= i <= n and a simplicial set of dimension at least n, the ith face map is implemented by the call\n\n∂(n, i, s, ...)\n\nThe boundary operator on n-faces and n-chains is implemented by the call\n\n∂(n, s, ...)\n\nNote that the face map returns simplices, while the boundary operator returns chains (vectors in the free vector space spanned by oriented simplices).\n\n\n\n\n\n","category":"method"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.∂₁-Tuple{Int64,Catlab.CSetDataStructures.AbstractAttributedCSet,Vararg{Any,N} where N}","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.∂₁","text":"Face map on edges and boundary operator on 1-chains in simplicial set.\n\n\n\n\n\n","category":"method"},{"location":"simplicial_sets/#CombinatorialSpaces.SimplicialSets.∂₂-Tuple{Int64,Catlab.CSetDataStructures.AbstractAttributedCSet,Vararg{Any,N} where N}","page":"Simplicial sets","title":"CombinatorialSpaces.SimplicialSets.∂₂","text":"Face map on triangles and boundary operator on 2-chains in simplicial set.\n\n\n\n\n\n","category":"method"},{"location":"combinatorial_maps/#Combinatorial-maps","page":"Combinatorial maps","title":"Combinatorial maps","text":"","category":"section"},{"location":"combinatorial_maps/","page":"Combinatorial maps","title":"Combinatorial maps","text":"Modules = [ CombinatorialSpaces.CombinatorialMaps ]\nPrivate = false","category":"page"},{"location":"combinatorial_maps/#CombinatorialSpaces.CombinatorialMaps","page":"Combinatorial maps","title":"CombinatorialSpaces.CombinatorialMaps","text":"Combinatorial maps and related structures, as C-sets.\n\nIn topological graph theory and graph drawing, an embedded graph is a combinatorial structure representing a graph embedded in an (oriented) surface, up to equivalence under (orientation-preserving) homeomorphism. This module defines data structures for rotation systems, combinatorial maps, and other combinatorial objects describing embedded graphs.\n\n\n\n\n\n","category":"module"},{"location":"combinatorial_maps/#CombinatorialSpaces.CombinatorialMaps.add_corolla!-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet{Catlab.Theories.CatDesc{(:V, :H),(:vertex, :inv, :σ),(2, 2, 2),(1, 2, 2)},AD,Ts} where Ts<:Tuple where AD<:(Catlab.Theories.AttrDesc{Catlab.Theories.CatDesc{(:V, :H),(:vertex, :inv, :σ),(2, 2, 2),(1, 2, 2)},Data,Attr,ADom,ACodom} where ACodom where ADom where Attr where Data),Int64}","page":"Combinatorial maps","title":"CombinatorialSpaces.CombinatorialMaps.add_corolla!","text":"Add corolla to rotation graph, rotation system, or similar structure.\n\nA corolla is a vertex together with its incident half-edges, the number of which is its valence. The rotation on the half-edges is the consecutive one induced by the half-edge part numbers.\n\n\n\n\n\n","category":"method"},{"location":"combinatorial_maps/#CombinatorialSpaces.CombinatorialMaps.pair_half_edges!-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet{Catlab.Theories.CatDesc{(:V, :H),(:vertex, :inv, :σ),(2, 2, 2),(1, 2, 2)},AD,Ts} where Ts<:Tuple where AD<:(Catlab.Theories.AttrDesc{Catlab.Theories.CatDesc{(:V, :H),(:vertex, :inv, :σ),(2, 2, 2),(1, 2, 2)},Data,Attr,ADom,ACodom} where ACodom where ADom where Attr where Data),Any,Any}","page":"Combinatorial maps","title":"CombinatorialSpaces.CombinatorialMaps.pair_half_edges!","text":"Pair together half-edges into edges.\n\n\n\n\n\n","category":"method"},{"location":"combinatorial_maps/#CombinatorialSpaces.CombinatorialMaps.trace_edges-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet}","page":"Combinatorial maps","title":"CombinatorialSpaces.CombinatorialMaps.trace_edges","text":"Trace edges of combinatorial map or similar, return a listing of cycles.\n\nUsually the cycles will be pairs of half edges but in a hypermap the cycles can be arbitrary.\n\n\n\n\n\n","category":"method"},{"location":"combinatorial_maps/#CombinatorialSpaces.CombinatorialMaps.trace_faces-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet}","page":"Combinatorial maps","title":"CombinatorialSpaces.CombinatorialMaps.trace_faces","text":"Trace faces of combinatorial map or similar, returning list of cycles.\n\n\n\n\n\n","category":"method"},{"location":"combinatorial_maps/#CombinatorialSpaces.CombinatorialMaps.trace_vertices-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet}","page":"Combinatorial maps","title":"CombinatorialSpaces.CombinatorialMaps.trace_vertices","text":"Trace vertices of combinatorial map or similar, returning a list of cycles.\n\n\n\n\n\n","category":"method"},{"location":"combinatorial_maps/#CombinatorialSpaces.CombinatorialMaps.α-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet,Vararg{Any,N} where N}","page":"Combinatorial maps","title":"CombinatorialSpaces.CombinatorialMaps.α","text":"Edge permutation of combinatorial map or similar structure.\n\n\n\n\n\n","category":"method"},{"location":"combinatorial_maps/#CombinatorialSpaces.CombinatorialMaps.σ-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet,Vararg{Any,N} where N}","page":"Combinatorial maps","title":"CombinatorialSpaces.CombinatorialMaps.σ","text":"Vertex permutation of combinatorial map or similar structure.\n\n\n\n\n\n","category":"method"},{"location":"combinatorial_maps/#CombinatorialSpaces.CombinatorialMaps.ϕ-Tuple{Catlab.CSetDataStructures.AbstractAttributedCSet,Vararg{Any,N} where N}","page":"Combinatorial maps","title":"CombinatorialSpaces.CombinatorialMaps.ϕ","text":"Face permutation of combinatorial map or similar structure.\n\n\n\n\n\n","category":"method"},{"location":"#CombinatorialSpaces.jl","page":"CombinatorialSpaces.jl","title":"CombinatorialSpaces.jl","text":"","category":"section"},{"location":"","page":"CombinatorialSpaces.jl","title":"CombinatorialSpaces.jl","text":"Simplicial sets and other combinatorial models of geometric spaces.","category":"page"}]
}
